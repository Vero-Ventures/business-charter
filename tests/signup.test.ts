import { test, chromium, expect } from '@playwright/test';
import { config } from './config';

// For testing existing email
const testData = {
  email: 'jyoon72@my.bcit.ca',
  password: '12345678',
};

test('Signup with unregistered email', async () => {
  const browser = await chromium.launch();
  const page = await browser.newPage();

  try {
    await page.goto(`${config.BASE_URL}/signup`);

    const signUpEmail = await page.$('input[name="email"]');
    const signUpPassword = await page.$('input[name="password"]');
    const signUpPasswordConfirm = await page.$('input[name="confirmPassword"]');

    // TODO: Autogenerated email and password
    await signUpEmail?.fill('jyoon72@my.bcit.ca');
    await signUpPassword?.fill('12345678');
    await signUpPasswordConfirm?.fill('12345678');

    const signUpButton = await page.$('button[type="submit"]');
    await signUpButton?.click();
    await page.waitForURL('**/decision-tree');
    await expect(page).toHaveURL(/.*\/decision-tree/, { timeout: 5000 });
    console.log('Signup with unregistered email passed');
  } catch (error) {
    console.error('Signup with unregistered email failed');
    throw error;
  } finally {
    await browser.close();
  }
});

test('Signup test with existing email', async () => {
  const browser = await chromium.launch();
  const page = await browser.newPage();

  try {
    await page.goto(`${config.BASE_URL}/signup`);

    const signUpEmail = await page.$('input[name="email"]');
    const signUpPassword = await page.$('input[name="password"]');
    const signUpPasswordConfirm = await page.$('input[name="confirmPassword"]');

    await signUpEmail?.fill(testData.email);
    await signUpPassword?.fill(testData.password);
    await signUpPasswordConfirm?.fill(testData.password);

    const signUpButton = await page.$('button[type="submit"]');
    await signUpButton?.click();
    await page.waitForSelector(
      'text="There was an error creating your account."',
      { state: 'visible' }
    );
    console.log('Signup test with existing email passed');
  } catch (error) {
    console.error('Signup test with existing email failed');
    throw error;
  } finally {
    await browser.close();
  }
});

test('Signup test with mismatched passwords', async () => {
  const browser = await chromium.launch();
  const page = await browser.newPage();

  try {
    await page.goto(`${config.BASE_URL}/signup`);

    const signUpEmail = await page.$('input[name="email"]');
    const signUpPassword = await page.$('input[name="password"]');
    const signUpPasswordConfirm = await page.$('input[name="confirmPassword"]');

    await signUpEmail?.fill(testData.email);
    await signUpPassword?.fill('12345678');
    await signUpPasswordConfirm?.fill('123456789');

    const signUpButton = await page.$('button[type="submit"]');
    await signUpButton?.click();
    await page.waitForSelector('text="Passwords do not match"', {
      state: 'visible',
    });
    console.log('Signup test with mismatched passwords passed');
  } catch (error) {
    console.error('Signup test with mismatched passwords failed');
    throw error;
  } finally {
    await browser.close();
  }
});

test('Signup test with weak password', async () => {});

test('Signup test with empty email', async () => {});

test('Signup test with empty password', async () => {});

test('Signup test with empty confirm password', async () => {});

test('Signup test with empty email and password', async () => {});

test('Signup test with empty email and confirm password', async () => {});

test('Signup test with empty password and confirm password', async () => {});

test('Signup test with empty email, password, and confirm password', async () => {});

test('Signup test with invalid email', async () => {});
